---
- hosts:
    - lxd_master
    - lxd_workers
  become: true
  gather_facts: true
  any_errors_fatal: true

  vars:
    certificate:
      stdout: will be overridden below
      command_output: '{{ certificate }}'
  tasks:
    
    - name: Configure LXD
      block:
        
        - name: remove existing LXD Cluster before Install
          shell: 'snap remove lxd --purge'
        
        - name: update LXD to latest
          community.general.snap:
            name: lxd
            channel: latest

    - name: Initialize LXD
      block:    
        - name: Initialize LXD Master | copy master preseed
          ansible.builtin.template:
            src: ../playbooks/templates/master-preseed.j2
            dest: ~/master-preseed.yml
            mode: '0644'
          when: inventory_hostname in groups['lxd_master']
        
        - name: Initialize LXD | LXD Master Init
          ansible.builtin.shell:
            chdir: ~/
            cmd: lxd init --preseed < master-preseed.yml
          when: inventory_hostname in groups['lxd_master']
        
        # - name: Initialize LXD | Create physical network
        #   command: lxc network create my-net --type=physical parent=br0
        #   when: inventory_hostname in groups['lxd_master']
        
        - name: Initialize LXD | Generate Worker Certificates
          shell: "{{ item }}"
          when: inventory_hostname in groups['lxd_master']
          register: certificate
          with_items:
            - "lxc cluster add server2"
            - "lxc cluster add server3" 
          failed_when: "'error' in certificate.stderr "
        
        - debug:
            msg: "{{ item.stdout | from_yaml }}"
          loop: "{{ certificate.results }}"
          when: inventory_hostname in groups['lxd_master']
          
        - set_fact:
            #certificates: "{{ certificate|default({}) | combine( {item.item.name: item.stdout} ) }}"
            #certificates: "{{ certificate|default([]) + [ {'name': item.item.name, 'cert': item.stdout} ] }}"
            certificates: >-
              {% set key, val = item.partition('=')[::2]|map('trim') -%}
              {% if ',' in val -%}
                {% set val = val.split(',')|map('trim')|list -%}
              {% endif -%}
              {{ item.msg | combine({key: val}) }}
          #with_items: "{{ certificate.results }}"
          loop: "{{ certificate.results }}"
          when: inventory_hostname in groups['lxd_master']


        - debug:
            fact: "{{ certificats }}"
            #certificate_server3: "{{ certificate.stdout | regex_replace ('.{288}$') | list }}"
          when: inventory_hostname in groups['lxd_master']

        # - debug:
        #     msg: "{{ certificate_server2 }}"
        
        # - name: Initialize LXD | copy worker preseed
        #   ansible.builtin.template:
        #     src: ../playbooks/templates/worker-preseed.j2
        #     dest: ~/worker-preseed.yml
        #     mode: '0644'
        #   when: inventory_hostname in groups['lxd_workers']
        
        # - name: Initialize LXD | LXD Worker Init
        #   ansible.builtin.shell:
        #     chdir: ~/
        #     cmd: lxd init --preseed < worker-preseed.yml
        #   when: inventory_hostname in groups['lxd_workers']



          # delegate_to: '{{ item }}'
          # delegate_facts: true
          # with_items: "{{ groups['lxd_workers'] }}"

        # - name: Create Default Profile
        # community.general.lxd_profile:
        #   merge_profile: true
        #   name: default
        #   state: present
        #   config: 
        #     linux.kernel_modules: rbd,bridge,br_netfilter,ip_tables,ip6_tables,ip_vs,netlink_diag,nf_nat,overlay,xt_conntrack
        #     raw.lxc: "lxc.kmsg=1 lxc.aa_profile = unconfined\nlxc.cgroup.devices.allow = a\nlxc.mount.auto=proc:rw sys:rw\nlxc.cap.drop = "
        #     security.nesting: "true"
        #     security.privileged: "true"
        #   description: Default LXD Profile
        #   devices:
        #     eth0:
        #       parent: br0
        #       type: nic
        #     root:
        #       path: /
        #       pool: dir-pool
        #       type: disk